{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Revolt\\\\revolt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport botLogo from './bot.png';\nimport { WaveFile } from 'wavefile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // States\n  const [isRecording, setIsRecording] = useState(false);\n  const [status, setStatus] = useState('Session ready.');\n  const [error, setError] = useState('');\n  const [isAIGenerating, setIsAIGenerating] = useState(false);\n  const [liveTranscript, setLiveTranscript] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  // Refs\n  const inputAudioContextRef = useRef(null);\n  const outputAudioContextRef = useRef(null);\n  const inputNodeRef = useRef(null);\n  const outputNodeRef = useRef(null);\n  const mediaStreamRef = useRef(null);\n  const sourceNodeRef = useRef(null);\n  const scriptProcessorNodeRef = useRef(null);\n  const nextStartTimeRef = useRef(0);\n  const sourcesRef = useRef(new Set());\n  const wsRef = useRef(null);\n  const isRecordingRef = useRef(false);\n  const currentTurnIdRef = useRef(null);\n  const lastInterruptTimeRef = useRef(0);\n\n  // Audio context helpers\n  const createInputAudioContext = () => {\n    const ctx = new (window.AudioContext || window.webkitAudioContext)({\n      sampleRate: 16000\n    });\n    inputNodeRef.current = ctx.createGain();\n    inputAudioContextRef.current = ctx;\n    return ctx;\n  };\n  const createOutputAudioContext = () => {\n    const ctx = new (window.AudioContext || window.webkitAudioContext)({\n      sampleRate: 24000\n    });\n    outputNodeRef.current = ctx.createGain();\n    outputNodeRef.current.connect(ctx.destination);\n    outputAudioContextRef.current = ctx;\n    return ctx;\n  };\n  const initAudio = () => {\n    if (!inputAudioContextRef.current || inputAudioContextRef.current.state === 'closed') createInputAudioContext();\n    if (!outputAudioContextRef.current || outputAudioContextRef.current.state === 'closed') createOutputAudioContext();\n    nextStartTimeRef.current = outputAudioContextRef.current.currentTime;\n  };\n\n  // Convert base64 audio data to ArrayBuffer\n  function base64ToArrayBuffer(base64String) {\n    try {\n      if (typeof base64String !== 'string' || base64String.length === 0) throw new Error('Invalid base64 string input');\n      const cleanBase64 = base64String.replace(/^data:[^;]+;base64,/, '').replace(/\\s+/g, '');\n      const binaryString = atob(cleanBase64);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) bytes[i] = binaryString.charCodeAt(i);\n      return bytes.buffer;\n    } catch (error) {\n      setError(`Audio conversion failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  // Play decoded audio buffer\n  const playAudioBuffer = async (audioBuffer, turnId = null) => {\n    if (turnId && turnId !== currentTurnIdRef.current) return;\n    const source = outputAudioContextRef.current.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(outputNodeRef.current);\n    source.onended = () => {\n      sourcesRef.current.delete(source);\n    };\n    const now = outputAudioContextRef.current.currentTime;\n    const startTime = Math.max(nextStartTimeRef.current, now + 0.01);\n    try {\n      source.start(startTime);\n      nextStartTimeRef.current = startTime + audioBuffer.duration;\n      sourcesRef.current.add(source);\n    } catch (error) {\n      setError(`Error playing audio: ${error.message}`);\n    }\n  };\n\n  // Decode raw PCM audio into AudioBuffer\n  async function decodeAudioData(arrayBuffer) {\n    try {\n      const view = new DataView(arrayBuffer);\n      const sampleCount = arrayBuffer.byteLength / 2;\n      const float32Array = new Float32Array(sampleCount);\n      for (let i = 0; i < sampleCount; i++) {\n        const int16Sample = view.getInt16(i * 2, true);\n        float32Array[i] = int16Sample / (int16Sample < 0 ? 32768 : 32767);\n      }\n      const audioBuffer = outputAudioContextRef.current.createBuffer(1, sampleCount, 24000);\n      audioBuffer.copyToChannel(float32Array, 0);\n      return audioBuffer;\n    } catch (error) {\n      setError(`Audio decode failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  // Handle interrupt messages from backend\n  const handleInterruption = (turnId, timestamp) => {\n    const now = Date.now();\n    if (now - lastInterruptTimeRef.current < 100) return;\n    lastInterruptTimeRef.current = now;\n    sourcesRef.current.forEach(source => {\n      try {\n        source.stop();\n      } catch {}\n    });\n    sourcesRef.current.clear();\n    nextStartTimeRef.current = outputAudioContextRef.current.currentTime;\n    setIsAIGenerating(false);\n    currentTurnIdRef.current = null;\n  };\n\n  // Connect WebSocket to backend for audio streaming and control messages\n  const connectWebSocket = () => {\n    const ws = new window.WebSocket(window.location.protocol === 'https:' ? `wss://${window.location.host}/api/genai-audio` : `ws://${window.location.hostname}:5050/api/genai-audio`);\n    ws.binaryType = 'arraybuffer';\n    ws.onopen = () => setStatus('WebSocket connected.');\n    ws.onmessage = async event => {\n      try {\n        const msg = JSON.parse(event.data);\n        if (msg.type === 'status') setStatus(msg.message);else if (msg.type === 'error') setError(msg.message);else if (msg.type === 'interrupt') handleInterruption(msg.turnId, msg.timestamp);else if (msg.type === 'generation_start') {\n          setIsAIGenerating(true);\n          currentTurnIdRef.current = msg.turnId;\n        } else if (msg.type === 'audio' && msg.data) {\n          const arrayBuffer = base64ToArrayBuffer(msg.data);\n          const audioBuffer = await decodeAudioData(arrayBuffer);\n          playAudioBuffer(audioBuffer, currentTurnIdRef.current);\n        }\n      } catch (err) {\n        setError(`Error handling message: ${err.message}`);\n      }\n    };\n    ws.onerror = () => setError('WebSocket error');\n    ws.onclose = () => setStatus('WebSocket closed.');\n    wsRef.current = ws;\n  };\n  const closeWebSocket = () => {\n    var _wsRef$current;\n    (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n    wsRef.current = null;\n  };\n\n  // Start recording from microphone\n  const startRecording = async () => {\n    if (isRecordingRef.current) return;\n    initAudio();\n    await inputAudioContextRef.current.resume();\n    setStatus('Requesting microphone access...');\n    setLiveTranscript('');\n    setError('');\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaStreamRef.current = mediaStream;\n      setStatus('Microphone access granted. Starting capture...');\n      connectWebSocket();\n      const sourceNode = inputAudioContextRef.current.createMediaStreamSource(mediaStream);\n      sourceNodeRef.current = sourceNode;\n      sourceNode.connect(inputNodeRef.current);\n      const scriptProcessorNode = inputAudioContextRef.current.createScriptProcessor(256, 1, 1);\n      scriptProcessorNode.onaudioprocess = event => {\n        var _wsRef$current2;\n        if (!isRecordingRef.current) return;\n        const pcmData = event.inputBuffer.getChannelData(0);\n        const int16Array = new Int16Array(pcmData.length);\n        for (let i = 0; i < pcmData.length; i++) {\n          int16Array[i] = Math.max(-32768, Math.min(32767, Math.floor(pcmData[i] * 32767)));\n        }\n        if (((_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.readyState) === WebSocket.OPEN) wsRef.current.send(int16Array.buffer);\n      };\n      sourceNode.connect(scriptProcessorNode);\n      scriptProcessorNode.connect(inputAudioContextRef.current.destination);\n      scriptProcessorNodeRef.current = scriptProcessorNode;\n      setIsRecording(true);\n      isRecordingRef.current = true;\n      setStatus('🔴 Recording... Capturing PCM chunks.');\n    } catch (err) {\n      setError(`Error: ${err.message}`);\n      setStatus('Error starting recording');\n      stopRecording();\n    }\n  };\n\n  // Stop recording and cleanup resources\n  const stopRecording = () => {\n    var _scriptProcessorNodeR, _sourceNodeRef$curren, _mediaStreamRef$curre, _inputAudioContextRef, _outputAudioContextRe;\n    setStatus('Stopping recording...');\n    setIsRecording(false);\n    isRecordingRef.current = false;\n    (_scriptProcessorNodeR = scriptProcessorNodeRef.current) === null || _scriptProcessorNodeR === void 0 ? void 0 : _scriptProcessorNodeR.disconnect();\n    (_sourceNodeRef$curren = sourceNodeRef.current) === null || _sourceNodeRef$curren === void 0 ? void 0 : _sourceNodeRef$curren.disconnect();\n    scriptProcessorNodeRef.current = null;\n    sourceNodeRef.current = null;\n    (_mediaStreamRef$curre = mediaStreamRef.current) === null || _mediaStreamRef$curre === void 0 ? void 0 : _mediaStreamRef$curre.getTracks().forEach(track => track.stop());\n    mediaStreamRef.current = null;\n    sourcesRef.current.forEach(source => {\n      try {\n        source.stop();\n      } catch {}\n    });\n    sourcesRef.current.clear();\n    closeWebSocket();\n    (_inputAudioContextRef = inputAudioContextRef.current) === null || _inputAudioContextRef === void 0 ? void 0 : _inputAudioContextRef.close();\n    inputAudioContextRef.current = null;\n    (_outputAudioContextRe = outputAudioContextRef.current) === null || _outputAudioContextRe === void 0 ? void 0 : _outputAudioContextRe.close();\n    outputAudioContextRef.current = null;\n    setStatus('Recording stopped. Click Start to begin again.');\n  };\n\n  // Reset everything\n  const reset = () => {\n    stopRecording();\n    setStatus('Session cleared.');\n    setMessages([]);\n    setLiveTranscript('');\n  };\n\n  // Cleanup on unmount\n  useEffect(() => {\n    initAudio();\n    return () => {\n      var _inputAudioContextRef2, _outputAudioContextRe2;\n      stopRecording();\n      (_inputAudioContextRef2 = inputAudioContextRef.current) === null || _inputAudioContextRef2 === void 0 ? void 0 : _inputAudioContextRef2.close();\n      inputAudioContextRef.current = null;\n      (_outputAudioContextRe2 = outputAudioContextRef.current) === null || _outputAudioContextRe2 === void 0 ? void 0 : _outputAudioContextRe2.close();\n      outputAudioContextRef.current = null;\n      closeWebSocket();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bot-ui\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: botLogo,\n        alt: \"Bot\",\n        className: \"bot-avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"bot-title\",\n      children: \"Revolt AI Voice Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bot-intro\",\n      children: [\"This bot provides helpful information about \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Revolt Motors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 51\n      }, this), \" in multiple languages.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 94\n      }, this), \"Ask anything about Revolt models, electric bikes, dealerships, charging, and features!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"start-btn\",\n        onClick: startRecording,\n        disabled: isRecording,\n        children: \"\\u25B6\\uFE0F Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"stop-btn\",\n        onClick: stopRecording,\n        disabled: !isRecording,\n        children: \"\\u23F9\\uFE0F Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-btn\",\n        onClick: reset,\n        disabled: isRecording,\n        children: \"\\uD83D\\uDD04 Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"live-transcript\",\n      children: isRecording && /*#__PURE__*/_jsxDEV(\"em\", {\n        children: [\"Transcribing... \", liveTranscript]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-bubble ${msg.sender}`,\n        children: msg.text\n      }, msg.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: error ? \"status-text error\" : \"status-text\",\n      children: error || status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"eB97PmC005dcRhLDI0aOe+slxeo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","botLogo","WaveFile","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","status","setStatus","error","setError","isAIGenerating","setIsAIGenerating","liveTranscript","setLiveTranscript","messages","setMessages","inputAudioContextRef","outputAudioContextRef","inputNodeRef","outputNodeRef","mediaStreamRef","sourceNodeRef","scriptProcessorNodeRef","nextStartTimeRef","sourcesRef","Set","wsRef","isRecordingRef","currentTurnIdRef","lastInterruptTimeRef","createInputAudioContext","ctx","window","AudioContext","webkitAudioContext","sampleRate","current","createGain","createOutputAudioContext","connect","destination","initAudio","state","currentTime","base64ToArrayBuffer","base64String","length","Error","cleanBase64","replace","binaryString","atob","bytes","Uint8Array","i","charCodeAt","buffer","message","playAudioBuffer","audioBuffer","turnId","source","createBufferSource","onended","delete","now","startTime","Math","max","start","duration","add","decodeAudioData","arrayBuffer","view","DataView","sampleCount","byteLength","float32Array","Float32Array","int16Sample","getInt16","createBuffer","copyToChannel","handleInterruption","timestamp","Date","forEach","stop","clear","connectWebSocket","ws","WebSocket","location","protocol","host","hostname","binaryType","onopen","onmessage","event","msg","JSON","parse","data","type","err","onerror","onclose","closeWebSocket","_wsRef$current","close","startRecording","resume","mediaStream","navigator","mediaDevices","getUserMedia","audio","sourceNode","createMediaStreamSource","scriptProcessorNode","createScriptProcessor","onaudioprocess","_wsRef$current2","pcmData","inputBuffer","getChannelData","int16Array","Int16Array","min","floor","readyState","OPEN","send","stopRecording","_scriptProcessorNodeR","_sourceNodeRef$curren","_mediaStreamRef$curre","_inputAudioContextRef","_outputAudioContextRe","disconnect","getTracks","track","reset","_inputAudioContextRef2","_outputAudioContextRe2","className","children","style","display","justifyContent","alignItems","width","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","map","sender","text","id","_c","$RefreshReg$"],"sources":["C:/Users/Asus/Revolt/revolt/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport botLogo from './bot.png';\r\nimport { WaveFile } from 'wavefile';\r\n\r\nfunction App() {\r\n  // States\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [status, setStatus] = useState('Session ready.');\r\n  const [error, setError] = useState('');\r\n  const [isAIGenerating, setIsAIGenerating] = useState(false);\r\n  const [liveTranscript, setLiveTranscript] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Refs\r\n  const inputAudioContextRef = useRef(null);\r\n  const outputAudioContextRef = useRef(null);\r\n  const inputNodeRef = useRef(null);\r\n  const outputNodeRef = useRef(null);\r\n  const mediaStreamRef = useRef(null);\r\n  const sourceNodeRef = useRef(null);\r\n  const scriptProcessorNodeRef = useRef(null);\r\n  const nextStartTimeRef = useRef(0);\r\n  const sourcesRef = useRef(new Set());\r\n  const wsRef = useRef(null);\r\n  const isRecordingRef = useRef(false);\r\n  const currentTurnIdRef = useRef(null);\r\n  const lastInterruptTimeRef = useRef(0);\r\n\r\n  // Audio context helpers\r\n  const createInputAudioContext = () => {\r\n    const ctx = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 16000 });\r\n    inputNodeRef.current = ctx.createGain();\r\n    inputAudioContextRef.current = ctx;\r\n    return ctx;\r\n  };\r\n\r\n  const createOutputAudioContext = () => {\r\n    const ctx = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 24000 });\r\n    outputNodeRef.current = ctx.createGain();\r\n    outputNodeRef.current.connect(ctx.destination);\r\n    outputAudioContextRef.current = ctx;\r\n    return ctx;\r\n  };\r\n\r\n  const initAudio = () => {\r\n    if (!inputAudioContextRef.current || inputAudioContextRef.current.state === 'closed') createInputAudioContext();\r\n    if (!outputAudioContextRef.current || outputAudioContextRef.current.state === 'closed') createOutputAudioContext();\r\n    nextStartTimeRef.current = outputAudioContextRef.current.currentTime;\r\n  };\r\n\r\n  // Convert base64 audio data to ArrayBuffer\r\n  function base64ToArrayBuffer(base64String) {\r\n    try {\r\n      if (typeof base64String !== 'string' || base64String.length === 0) throw new Error('Invalid base64 string input');\r\n      const cleanBase64 = base64String.replace(/^data:[^;]+;base64,/, '').replace(/\\s+/g, '');\r\n      const binaryString = atob(cleanBase64);\r\n      const bytes = new Uint8Array(binaryString.length);\r\n      for (let i = 0; i < binaryString.length; i++) bytes[i] = binaryString.charCodeAt(i);\r\n      return bytes.buffer;\r\n    } catch (error) {\r\n      setError(`Audio conversion failed: ${error.message}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Play decoded audio buffer\r\n  const playAudioBuffer = async (audioBuffer, turnId = null) => {\r\n    if (turnId && turnId !== currentTurnIdRef.current) return;\r\n    const source = outputAudioContextRef.current.createBufferSource();\r\n    source.buffer = audioBuffer;\r\n    source.connect(outputNodeRef.current);\r\n    source.onended = () => { sourcesRef.current.delete(source); };\r\n    const now = outputAudioContextRef.current.currentTime;\r\n    const startTime = Math.max(nextStartTimeRef.current, now + 0.01);\r\n    try {\r\n      source.start(startTime);\r\n      nextStartTimeRef.current = startTime + audioBuffer.duration;\r\n      sourcesRef.current.add(source);\r\n    } catch (error) {\r\n      setError(`Error playing audio: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  // Decode raw PCM audio into AudioBuffer\r\n  async function decodeAudioData(arrayBuffer) {\r\n    try {\r\n      const view = new DataView(arrayBuffer);\r\n      const sampleCount = arrayBuffer.byteLength / 2;\r\n      const float32Array = new Float32Array(sampleCount);\r\n      for (let i = 0; i < sampleCount; i++) {\r\n        const int16Sample = view.getInt16(i * 2, true);\r\n        float32Array[i] = int16Sample / (int16Sample < 0 ? 32768 : 32767);\r\n      }\r\n      const audioBuffer = outputAudioContextRef.current.createBuffer(1, sampleCount, 24000);\r\n      audioBuffer.copyToChannel(float32Array, 0);\r\n      return audioBuffer;\r\n    } catch (error) {\r\n      setError(`Audio decode failed: ${error.message}`);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Handle interrupt messages from backend\r\n  const handleInterruption = (turnId, timestamp) => {\r\n    const now = Date.now();\r\n    if (now - lastInterruptTimeRef.current < 100) return;\r\n    lastInterruptTimeRef.current = now;\r\n    sourcesRef.current.forEach(source => { try { source.stop(); } catch {} });\r\n    sourcesRef.current.clear();\r\n    nextStartTimeRef.current = outputAudioContextRef.current.currentTime;\r\n    setIsAIGenerating(false);\r\n    currentTurnIdRef.current = null;\r\n  };\r\n\r\n  // Connect WebSocket to backend for audio streaming and control messages\r\n  const connectWebSocket = () => {\r\n    const ws = new window.WebSocket(\r\n      window.location.protocol === 'https:'\r\n        ? `wss://${window.location.host}/api/genai-audio`\r\n        : `ws://${window.location.hostname}:5050/api/genai-audio`\r\n    );\r\n    ws.binaryType = 'arraybuffer';\r\n    ws.onopen = () => setStatus('WebSocket connected.');\r\n    ws.onmessage = async (event) => {\r\n      try {\r\n        const msg = JSON.parse(event.data);\r\n        if (msg.type === 'status') setStatus(msg.message);\r\n        else if (msg.type === 'error') setError(msg.message);\r\n        else if (msg.type === 'interrupt') handleInterruption(msg.turnId, msg.timestamp);\r\n        else if (msg.type === 'generation_start') {\r\n          setIsAIGenerating(true);\r\n          currentTurnIdRef.current = msg.turnId;\r\n        }\r\n        else if (msg.type === 'audio' && msg.data) {\r\n          const arrayBuffer = base64ToArrayBuffer(msg.data);\r\n          const audioBuffer = await decodeAudioData(arrayBuffer);\r\n          playAudioBuffer(audioBuffer, currentTurnIdRef.current);\r\n        }\r\n      } catch (err) {\r\n        setError(`Error handling message: ${err.message}`);\r\n      }\r\n    };\r\n    ws.onerror = () => setError('WebSocket error');\r\n    ws.onclose = () => setStatus('WebSocket closed.');\r\n    wsRef.current = ws;\r\n  };\r\n\r\n  const closeWebSocket = () => {\r\n    wsRef.current?.close();\r\n    wsRef.current = null;\r\n  };\r\n\r\n  // Start recording from microphone\r\n  const startRecording = async () => {\r\n    if (isRecordingRef.current) return;\r\n    initAudio();\r\n    await inputAudioContextRef.current.resume();\r\n    setStatus('Requesting microphone access...');\r\n    setLiveTranscript('');\r\n    setError('');\r\n    try {\r\n      const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      mediaStreamRef.current = mediaStream;\r\n      setStatus('Microphone access granted. Starting capture...');\r\n      connectWebSocket();\r\n      const sourceNode = inputAudioContextRef.current.createMediaStreamSource(mediaStream);\r\n      sourceNodeRef.current = sourceNode;\r\n      sourceNode.connect(inputNodeRef.current);\r\n      const scriptProcessorNode = inputAudioContextRef.current.createScriptProcessor(256, 1, 1);\r\n      scriptProcessorNode.onaudioprocess = (event) => {\r\n        if (!isRecordingRef.current) return;\r\n        const pcmData = event.inputBuffer.getChannelData(0);\r\n        const int16Array = new Int16Array(pcmData.length);\r\n        for (let i = 0; i < pcmData.length; i++) {\r\n          int16Array[i] = Math.max(-32768, Math.min(32767, Math.floor(pcmData[i] * 32767)));\r\n        }\r\n        if (wsRef.current?.readyState === WebSocket.OPEN) wsRef.current.send(int16Array.buffer);\r\n      };\r\n      sourceNode.connect(scriptProcessorNode);\r\n      scriptProcessorNode.connect(inputAudioContextRef.current.destination);\r\n      scriptProcessorNodeRef.current = scriptProcessorNode;\r\n      setIsRecording(true);\r\n      isRecordingRef.current = true;\r\n      setStatus('🔴 Recording... Capturing PCM chunks.');\r\n    } catch (err) {\r\n      setError(`Error: ${err.message}`);\r\n      setStatus('Error starting recording');\r\n      stopRecording();\r\n    }\r\n  };\r\n\r\n  // Stop recording and cleanup resources\r\n  const stopRecording = () => {\r\n    setStatus('Stopping recording...');\r\n    setIsRecording(false);\r\n    isRecordingRef.current = false;\r\n    scriptProcessorNodeRef.current?.disconnect();\r\n    sourceNodeRef.current?.disconnect();\r\n    scriptProcessorNodeRef.current = null;\r\n    sourceNodeRef.current = null;\r\n    mediaStreamRef.current?.getTracks().forEach(track => track.stop());\r\n    mediaStreamRef.current = null;\r\n    sourcesRef.current.forEach(source => { try { source.stop(); } catch {} });\r\n    sourcesRef.current.clear();\r\n    closeWebSocket();\r\n    inputAudioContextRef.current?.close();\r\n    inputAudioContextRef.current = null;\r\n    outputAudioContextRef.current?.close();\r\n    outputAudioContextRef.current = null;\r\n    setStatus('Recording stopped. Click Start to begin again.');\r\n  };\r\n\r\n  // Reset everything\r\n  const reset = () => {\r\n    stopRecording();\r\n    setStatus('Session cleared.');\r\n    setMessages([]);\r\n    setLiveTranscript('');\r\n  };\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    initAudio();\r\n    return () => {\r\n      stopRecording();\r\n      inputAudioContextRef.current?.close();\r\n      inputAudioContextRef.current = null;\r\n      outputAudioContextRef.current?.close();\r\n      outputAudioContextRef.current = null;\r\n      closeWebSocket();\r\n    };\r\n  }, []);\r\n\r\nreturn (\r\n  <div className=\"bot-ui\">\r\n    <div style={{\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      width: '100%'\r\n    }}>\r\n      <img src={botLogo} alt=\"Bot\" className=\"bot-avatar\" />\r\n    </div>\r\n    <h2 className=\"bot-title\">Revolt AI Voice Bot</h2>\r\n    <div className=\"bot-intro\">\r\n      This bot provides helpful information about <b>Revolt Motors</b> in multiple languages.<br />\r\n      Ask anything about Revolt models, electric bikes, dealerships, charging, and features!\r\n    </div>\r\n    <div className=\"button-group controls\">\r\n      <button className=\"start-btn\" onClick={startRecording} disabled={isRecording}>\r\n        ▶️ Start\r\n      </button>\r\n      <button className=\"stop-btn\" onClick={stopRecording} disabled={!isRecording}>\r\n        ⏹️ Stop\r\n      </button>\r\n      <button className=\"reset-btn\" onClick={reset} disabled={isRecording}>\r\n        🔄 Reset\r\n      </button>\r\n    </div>\r\n    <div className=\"live-transcript\">\r\n      {isRecording && <em>Transcribing... {liveTranscript}</em>}\r\n    </div>\r\n    <div className=\"chat-window\">\r\n      {messages.map(msg => (\r\n        <div key={msg.id} className={`chat-bubble ${msg.sender}`}>\r\n          {msg.text}\r\n        </div>\r\n      ))}\r\n    </div>\r\n    <div className={error ? \"status-text error\" : \"status-text\"}>\r\n      {error || status}\r\n    </div>\r\n  </div>\r\n);\r\n}\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}