{"ast":null,"code":"import React,{useState,useRef,useEffect}from'react';import'./App.css';import{WaveFile}from'wavefile';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[isRecording,setIsRecording]=useState(false);const[status,setStatus]=useState('');const[error,setError]=useState('');const[isAIGenerating,setIsAIGenerating]=useState(false);// Refs for audio context and nodes\nconst inputAudioContextRef=useRef(null);const outputAudioContextRef=useRef(null);const inputNodeRef=useRef(null);const outputNodeRef=useRef(null);const mediaStreamRef=useRef(null);const sourceNodeRef=useRef(null);const scriptProcessorNodeRef=useRef(null);const nextStartTimeRef=useRef(0);const sourcesRef=useRef(new Set());const wsRef=useRef(null);const isRecordingRef=useRef(false);// Additional ref for real-time recording state\nconst currentTurnIdRef=useRef(null);const lastInterruptTimeRef=useRef(0);// Helper to create a new AudioContext\nconst createInputAudioContext=()=>{const ctx=new(window.AudioContext||window.webkitAudioContext)({sampleRate:16000});inputNodeRef.current=ctx.createGain();inputAudioContextRef.current=ctx;return ctx;};const createOutputAudioContext=()=>{const ctx=new(window.AudioContext||window.webkitAudioContext)({sampleRate:24000});outputNodeRef.current=ctx.createGain();outputNodeRef.current.connect(ctx.destination);outputAudioContextRef.current=ctx;return ctx;};// Initialize audio contexts (create new if closed or null)\nconst initAudio=()=>{if(!inputAudioContextRef.current||inputAudioContextRef.current.state==='closed'){createInputAudioContext();}if(!outputAudioContextRef.current||outputAudioContextRef.current.state==='closed'){createOutputAudioContext();}nextStartTimeRef.current=outputAudioContextRef.current.currentTime;};// Helper to decode base64 to ArrayBuffer\nfunction base64ToArrayBuffer(base64String){try{// 1. Validate input\nif(typeof base64String!=='string'||base64String.length===0){throw new Error('Invalid base64 string input');}// 2. Clean and prepare base64\nconst cleanBase64=base64String.replace(/^data:[^;]+;base64,/,'').replace(/\\s+/g,'');// 3. Calculate and add padding if needed\n// const padLength = (4 - (cleanBase64.length % 4)) % 4;\n// const paddedBase64 = cleanBase64 + '='.repeat(padLength);\n// 4. Convert to binary string\nconst binaryString=atob(cleanBase64);// 5. Create NEW ArrayBuffer in one step (critical fix)\nconst bytes=new Uint8Array(binaryString.length);for(let i=0;i<binaryString.length;i++){bytes[i]=binaryString.charCodeAt(i);}// 6. Return the buffer (bytes.buffer is guaranteed fresh)\nreturn bytes.buffer;}catch(error){console.error('Conversion failed:',{error:error.message,inputSample:base64String===null||base64String===void 0?void 0:base64String.slice(0,30),inputLength:base64String===null||base64String===void 0?void 0:base64String.length});throw new Error(`Audio conversion failed: ${error.message}`);}}// Helper to play audio buffer\nconst playAudioBuffer=async function(audioBuffer){let turnId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;// Don't play audio from interrupted turns\nif(turnId&&turnId!==currentTurnIdRef.current){console.log(`Skipping audio from interrupted turn: ${turnId}`);return;}console.log(\"will play\",audioBuffer);const source=outputAudioContextRef.current.createBufferSource();source.buffer=audioBuffer;source.connect(outputNodeRef.current);source.onended=()=>{sourcesRef.current.delete(source);};// CHANGE: Improved timing management for interruptions\nconst now=outputAudioContextRef.current.currentTime;const startTime=Math.max(nextStartTimeRef.current,now+0.01);// Small buffer to prevent timing issues\ntry{source.start(startTime);nextStartTimeRef.current=startTime+audioBuffer.duration;sourcesRef.current.add(source);}catch(error){console.error('Error starting audio source:',error);}};// Helper to decode PCM audio (assume 24kHz mono float32 PCM or WAV)\nasync function decodeAudioData(arrayBuffer){try{// Gemini Live API returns raw 16-bit little-endian PCM at 24kHz\nconst view=new DataView(arrayBuffer);// 16-bit = 2 bytes per sample\nconst sampleCount=arrayBuffer.byteLength/2;const float32Array=new Float32Array(sampleCount);// Convert 16-bit PCM to Float32 with proper scaling\nfor(let i=0;i<sampleCount;i++){const int16Sample=view.getInt16(i*2,true);// little-endian\n// Convert to float32 range [-1, 1] with proper scaling\nfloat32Array[i]=int16Sample/(int16Sample<0?32768:32767);}// Create AudioBuffer with Gemini's native sample rate (24kHz)\nconst audioBuffer=outputAudioContextRef.current.createBuffer(1,// mono channel\nsampleCount,// length in samples\n24000// Gemini's output sample rate\n);audioBuffer.copyToChannel(float32Array,0);return audioBuffer;}catch(error){console.error('Audio decode failed:',error);throw new Error('Audio decode failed: '+error.message);}}const handleInterruption=(turnId,timestamp)=>{const now=Date.now();// Prevent duplicate interruption handling\nif(now-lastInterruptTimeRef.current<100){return;}lastInterruptTimeRef.current=now;console.log(`Handling interruption for turn ${turnId} at ${timestamp}`);// Stop all active audio sources immediately\nsourcesRef.current.forEach(source=>{try{source.stop();}catch(error){console.log('Source already stopped or invalid:',error);}});sourcesRef.current.clear();// CHANGE: Proper timing reset - use current time, not 0\nnextStartTimeRef.current=outputAudioContextRef.current.currentTime;// Reset generation state\nsetIsAIGenerating(false);currentTurnIdRef.current=null;console.log('Interruption handled: Playback stopped and timing reset.');};// WebSocket connection logic\nconst connectWebSocket=()=>{const ws=new window.WebSocket(window.location.protocol==='https:'?'wss://'+window.location.host+'/api/genai-audio':'ws://'+window.location.hostname+':5050/api/genai-audio');ws.binaryType='arraybuffer';ws.onopen=()=>{setStatus('WebSocket connected.');};ws.onmessage=async event=>{try{const msg=JSON.parse(event.data);if(msg.type==='status'){setStatus(msg.message);}else if(msg.type==='error'){setError(msg.message);// CHANGE: Enhanced interruption handling with turn tracking\n}else if(msg.type==='interrupt'){handleInterruption(msg.turnId,msg.timestamp);// CHANGE: Added generation start tracking\n}else if(msg.type==='generation_start'){setIsAIGenerating(true);currentTurnIdRef.current=msg.turnId;console.log(`AI generation started for turn: ${msg.turnId}`);}else if(msg.type==='audio'&&msg.data){const arrayBuffer=base64ToArrayBuffer(msg.data);console.log(\"decoding\",arrayBuffer);const audioBuffer=await decodeAudioData(arrayBuffer);console.log(\"will play\");// CHANGE: Pass current turn ID to playback function\nplayAudioBuffer(audioBuffer,currentTurnIdRef.current);}}catch(err){setError('Error handling message: '+err.message);}};ws.onerror=e=>{setError('WebSocket error');};ws.onclose=()=>{setStatus('WebSocket closed.');};wsRef.current=ws;};const closeWebSocket=()=>{if(wsRef.current){wsRef.current.close();wsRef.current=null;}};const startRecording=async()=>{if(isRecordingRef.current)return;initAudio();await inputAudioContextRef.current.resume();setStatus('Requesting microphone access...');try{const mediaStream=await navigator.mediaDevices.getUserMedia({audio:true,video:false});mediaStreamRef.current=mediaStream;setStatus('Microphone access granted. Starting capture...');connectWebSocket();const sourceNode=inputAudioContextRef.current.createMediaStreamSource(mediaStream);sourceNodeRef.current=sourceNode;sourceNode.connect(inputNodeRef.current);const bufferSize=256;const scriptProcessorNode=inputAudioContextRef.current.createScriptProcessor(bufferSize,1,1);scriptProcessorNode.onaudioprocess=audioProcessingEvent=>{if(!isRecordingRef.current)return;const inputBuffer=audioProcessingEvent.inputBuffer;const pcmData=inputBuffer.getChannelData(0);// Float32Array (-1 to 1)\n// Convert to 16-bit PCM properly\nconst int16Array=new Int16Array(pcmData.length);for(let i=0;i<pcmData.length;i++){// Scale from [-1, 1] to [-32768, 32767]\nint16Array[i]=Math.max(-32768,Math.min(32767,Math.floor(pcmData[i]*32767)));}// Send raw PCM buffer directly (lower latency than WAV)\ntry{var _wsRef$current;if(((_wsRef$current=wsRef.current)===null||_wsRef$current===void 0?void 0:_wsRef$current.readyState)===WebSocket.OPEN){wsRef.current.send(int16Array.buffer);}}catch(err){console.error('Error sending PCM:',err);}};sourceNode.connect(scriptProcessorNode);scriptProcessorNode.connect(inputAudioContextRef.current.destination);scriptProcessorNodeRef.current=scriptProcessorNode;// Update both state and ref\nsetIsRecording(true);isRecordingRef.current=true;setStatus('ðŸ”´ Recording... Capturing PCM chunks.');}catch(err){setError(`Error: ${err.message}`);setStatus('Error starting recording');stopRecording();}};const stopRecording=()=>{setStatus('Stopping recording...');setIsRecording(false);isRecordingRef.current=false;if(scriptProcessorNodeRef.current&&sourceNodeRef.current&&inputAudioContextRef.current){scriptProcessorNodeRef.current.disconnect();sourceNodeRef.current.disconnect();}scriptProcessorNodeRef.current=null;sourceNodeRef.current=null;if(mediaStreamRef.current){mediaStreamRef.current.getTracks().forEach(track=>track.stop());mediaStreamRef.current=null;}sourcesRef.current.forEach(source=>{try{source.stop();}catch(error){console.log('Source already stopped:',error);}});sourcesRef.current.clear();closeWebSocket();if(inputAudioContextRef.current&&inputAudioContextRef.current.state!=='closed'){inputAudioContextRef.current.close();inputAudioContextRef.current=null;}if(outputAudioContextRef.current&&outputAudioContextRef.current.state!=='closed'){outputAudioContextRef.current.close();outputAudioContextRef.current=null;}setStatus('Recording stopped. Click Start to begin again.');};const reset=()=>{stopRecording();setStatus('Session cleared.');};// Cleanup on unmount\nuseEffect(()=>{initAudio();return()=>{stopRecording();if(inputAudioContextRef.current&&inputAudioContextRef.current.state!=='closed'){inputAudioContextRef.current.close();inputAudioContextRef.current=null;}if(outputAudioContextRef.current&&outputAudioContextRef.current.state!=='closed'){outputAudioContextRef.current.close();outputAudioContextRef.current=null;}closeWebSocket();};},[]);return/*#__PURE__*/_jsxs(\"div\",{style:{position:'relative',minHeight:'100vh',background:'#222',color:'#fff'},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",style:{position:'absolute',bottom:'10vh',left:0,right:0,display:'flex',alignItems:'center',justifyContent:'center',flexDirection:'column',gap:10,zIndex:10},children:[/*#__PURE__*/_jsx(\"button\",{id:\"resetButton\",onClick:reset,disabled:isRecording,style:{outline:'none',border:'1px solid rgba(255,255,255,0.2)',color:'white',borderRadius:12,background:'rgba(255,255,255,0.1)',width:64,height:64,cursor:'pointer',fontSize:24,padding:0,margin:0},children:/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",height:\"40px\",viewBox:\"0 -960 960 960\",width:\"40px\",fill:\"#ffffff\",children:/*#__PURE__*/_jsx(\"path\",{d:\"M480-160q-134 0-227-93t-93-227q0-134 93-227t227-93q69 0 132 28.5T720-690v-110h80v280H520v-80h168q-32-56-87.5-88T480-720q-100 0-170 70t-70 170q0 100 70 170t170 70q77 0 139-44t87-116h84q-28 106-114 173t-196 67Z\"})})}),/*#__PURE__*/_jsx(\"button\",{id:\"startButton\",onClick:startRecording,disabled:isRecording,style:{outline:'none',border:'1px solid rgba(255,255,255,0.2)',color:'white',borderRadius:12,background:'rgba(255,255,255,0.1)',width:64,height:64,cursor:'pointer',fontSize:24,padding:0,margin:0},children:/*#__PURE__*/_jsx(\"svg\",{viewBox:\"0 0 100 100\",width:\"32px\",height:\"32px\",fill:\"#c80000\",xmlns:\"http://www.w3.org/2000/svg\",children:/*#__PURE__*/_jsx(\"circle\",{cx:\"50\",cy:\"50\",r:\"50\"})})}),/*#__PURE__*/_jsx(\"button\",{id:\"stopButton\",onClick:stopRecording,disabled:!isRecording,style:{outline:'none',border:'1px solid rgba(255,255,255,0.2)',color:'white',borderRadius:12,background:'rgba(255,255,255,0.1)',width:64,height:64,cursor:'pointer',fontSize:24,padding:0,margin:0},children:/*#__PURE__*/_jsx(\"svg\",{viewBox:\"0 0 100 100\",width:\"32px\",height:\"32px\",fill:\"#000000\",xmlns:\"http://www.w3.org/2000/svg\",children:/*#__PURE__*/_jsx(\"rect\",{x:\"0\",y:\"0\",width:\"100\",height:\"100\",rx:\"15\"})})})]}),/*#__PURE__*/_jsx(\"div\",{id:\"status\",style:{position:'absolute',bottom:'5vh',left:0,right:0,zIndex:10,textAlign:'center'},children:error||status})]});}export default App;","map":{"version":3,"names":["React","useState","useRef","useEffect","WaveFile","jsx","_jsx","jsxs","_jsxs","App","isRecording","setIsRecording","status","setStatus","error","setError","isAIGenerating","setIsAIGenerating","inputAudioContextRef","outputAudioContextRef","inputNodeRef","outputNodeRef","mediaStreamRef","sourceNodeRef","scriptProcessorNodeRef","nextStartTimeRef","sourcesRef","Set","wsRef","isRecordingRef","currentTurnIdRef","lastInterruptTimeRef","createInputAudioContext","ctx","window","AudioContext","webkitAudioContext","sampleRate","current","createGain","createOutputAudioContext","connect","destination","initAudio","state","currentTime","base64ToArrayBuffer","base64String","length","Error","cleanBase64","replace","binaryString","atob","bytes","Uint8Array","i","charCodeAt","buffer","console","message","inputSample","slice","inputLength","playAudioBuffer","audioBuffer","turnId","arguments","undefined","log","source","createBufferSource","onended","delete","now","startTime","Math","max","start","duration","add","decodeAudioData","arrayBuffer","view","DataView","sampleCount","byteLength","float32Array","Float32Array","int16Sample","getInt16","createBuffer","copyToChannel","handleInterruption","timestamp","Date","forEach","stop","clear","connectWebSocket","ws","WebSocket","location","protocol","host","hostname","binaryType","onopen","onmessage","event","msg","JSON","parse","data","type","err","onerror","e","onclose","closeWebSocket","close","startRecording","resume","mediaStream","navigator","mediaDevices","getUserMedia","audio","video","sourceNode","createMediaStreamSource","bufferSize","scriptProcessorNode","createScriptProcessor","onaudioprocess","audioProcessingEvent","inputBuffer","pcmData","getChannelData","int16Array","Int16Array","min","floor","_wsRef$current","readyState","OPEN","send","stopRecording","disconnect","getTracks","track","reset","style","position","minHeight","background","color","children","className","bottom","left","right","display","alignItems","justifyContent","flexDirection","gap","zIndex","id","onClick","disabled","outline","border","borderRadius","width","height","cursor","fontSize","padding","margin","xmlns","viewBox","fill","d","cx","cy","r","x","y","rx","textAlign"],"sources":["C:/Users/Asus/Revolt/revolt/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport { WaveFile } from 'wavefile';\r\n\r\nfunction App() {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [status, setStatus] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isAIGenerating, setIsAIGenerating] = useState(false);\r\n\r\n  // Refs for audio context and nodes\r\n  const inputAudioContextRef = useRef(null);\r\n  const outputAudioContextRef = useRef(null);\r\n  const inputNodeRef = useRef(null);\r\n  const outputNodeRef = useRef(null);\r\n  const mediaStreamRef = useRef(null);\r\n  const sourceNodeRef = useRef(null);\r\n  const scriptProcessorNodeRef = useRef(null);\r\n  const nextStartTimeRef = useRef(0);\r\n  const sourcesRef = useRef(new Set());\r\n  const wsRef = useRef(null);\r\n  const isRecordingRef = useRef(false); // Additional ref for real-time recording state\r\n  const currentTurnIdRef = useRef(null);\r\n  const lastInterruptTimeRef = useRef(0);\r\n\r\n  // Helper to create a new AudioContext\r\n  const createInputAudioContext = () => {\r\n    const ctx = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 16000 });\r\n    inputNodeRef.current = ctx.createGain();\r\n    inputAudioContextRef.current = ctx;\r\n    return ctx;\r\n  };\r\n\r\n  const createOutputAudioContext = () => {\r\n    const ctx = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 24000 });\r\n    outputNodeRef.current = ctx.createGain();\r\n    outputNodeRef.current.connect(ctx.destination);\r\n    outputAudioContextRef.current = ctx;\r\n    return ctx;\r\n  };\r\n\r\n  // Initialize audio contexts (create new if closed or null)\r\n  const initAudio = () => {\r\n    if (!inputAudioContextRef.current || inputAudioContextRef.current.state === 'closed') {\r\n      createInputAudioContext();\r\n    }\r\n    if (!outputAudioContextRef.current || outputAudioContextRef.current.state === 'closed') {\r\n      createOutputAudioContext();\r\n    }\r\n    nextStartTimeRef.current = outputAudioContextRef.current.currentTime;\r\n  };\r\n\r\n  // Helper to decode base64 to ArrayBuffer\r\n  function base64ToArrayBuffer(base64String) {\r\n    try {\r\n      // 1. Validate input\r\n      if (typeof base64String !== 'string' || base64String.length === 0) {\r\n        throw new Error('Invalid base64 string input');\r\n      }\r\n\r\n      // 2. Clean and prepare base64\r\n      const cleanBase64 = base64String\r\n        .replace(/^data:[^;]+;base64,/, '')\r\n        .replace(/\\s+/g, '');\r\n\r\n      // 3. Calculate and add padding if needed\r\n      // const padLength = (4 - (cleanBase64.length % 4)) % 4;\r\n      // const paddedBase64 = cleanBase64 + '='.repeat(padLength);\r\n\r\n      // 4. Convert to binary string\r\n      const binaryString = atob(cleanBase64);\r\n\r\n      // 5. Create NEW ArrayBuffer in one step (critical fix)\r\n      const bytes = new Uint8Array(binaryString.length);\r\n      for (let i = 0; i < binaryString.length; i++) {\r\n        bytes[i] = binaryString.charCodeAt(i);\r\n      }\r\n\r\n      // 6. Return the buffer (bytes.buffer is guaranteed fresh)\r\n      return bytes.buffer;\r\n    } catch (error) {\r\n      console.error('Conversion failed:', {\r\n        error: error.message,\r\n        inputSample: base64String?.slice(0, 30),\r\n        inputLength: base64String?.length\r\n      });\r\n      throw new Error(`Audio conversion failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Helper to play audio buffer\r\n  const playAudioBuffer = async (audioBuffer, turnId = null) => {\r\n    // Don't play audio from interrupted turns\r\n    if (turnId && turnId !== currentTurnIdRef.current) {\r\n      console.log(`Skipping audio from interrupted turn: ${turnId}`);\r\n      return;\r\n    }\r\n\r\n    console.log(\"will play\", audioBuffer)\r\n    const source = outputAudioContextRef.current.createBufferSource();\r\n    source.buffer = audioBuffer;\r\n    source.connect(outputNodeRef.current);\r\n    \r\n    source.onended = () => {\r\n      sourcesRef.current.delete(source);\r\n    };\r\n    \r\n    // CHANGE: Improved timing management for interruptions\r\n    const now = outputAudioContextRef.current.currentTime;\r\n    const startTime = Math.max(nextStartTimeRef.current, now + 0.01); // Small buffer to prevent timing issues\r\n    \r\n    try {\r\n      source.start(startTime);\r\n      nextStartTimeRef.current = startTime + audioBuffer.duration;\r\n      sourcesRef.current.add(source);\r\n    } catch (error) {\r\n      console.error('Error starting audio source:', error);\r\n    }\r\n  };\r\n\r\n  // Helper to decode PCM audio (assume 24kHz mono float32 PCM or WAV)\r\n  async function decodeAudioData(arrayBuffer) {\r\n    try {\r\n      // Gemini Live API returns raw 16-bit little-endian PCM at 24kHz\r\n      const view = new DataView(arrayBuffer);\r\n      // 16-bit = 2 bytes per sample\r\n      const sampleCount = arrayBuffer.byteLength / 2;\r\n      const float32Array = new Float32Array(sampleCount);\r\n  \r\n      // Convert 16-bit PCM to Float32 with proper scaling\r\n      for (let i = 0; i < sampleCount; i++) {\r\n        const int16Sample = view.getInt16(i * 2, true); // little-endian\r\n        // Convert to float32 range [-1, 1] with proper scaling\r\n        float32Array[i] = int16Sample / (int16Sample < 0 ? 32768 : 32767);\r\n      }\r\n  \r\n      // Create AudioBuffer with Gemini's native sample rate (24kHz)\r\n      const audioBuffer = outputAudioContextRef.current.createBuffer(\r\n        1,         // mono channel\r\n        sampleCount, // length in samples\r\n        24000      // Gemini's output sample rate\r\n      );\r\n  \r\n      audioBuffer.copyToChannel(float32Array, 0);\r\n      return audioBuffer;\r\n  \r\n    } catch (error) {\r\n      console.error('Audio decode failed:', error);\r\n      throw new Error('Audio decode failed: ' + error.message);\r\n    }\r\n  }\r\n  const handleInterruption = (turnId, timestamp) => {\r\n    const now = Date.now();\r\n    \r\n    // Prevent duplicate interruption handling\r\n    if (now - lastInterruptTimeRef.current < 100) {\r\n      return;\r\n    }\r\n    lastInterruptTimeRef.current = now;\r\n\r\n    console.log(`Handling interruption for turn ${turnId} at ${timestamp}`);\r\n    \r\n    // Stop all active audio sources immediately\r\n    sourcesRef.current.forEach((source) => {\r\n      try {\r\n        source.stop();\r\n      } catch (error) {\r\n        console.log('Source already stopped or invalid:', error);\r\n      }\r\n    });\r\n    sourcesRef.current.clear();\r\n    \r\n    // CHANGE: Proper timing reset - use current time, not 0\r\n    nextStartTimeRef.current = outputAudioContextRef.current.currentTime;\r\n    \r\n    // Reset generation state\r\n    setIsAIGenerating(false);\r\n    currentTurnIdRef.current = null;\r\n    \r\n    console.log('Interruption handled: Playback stopped and timing reset.');\r\n  };\r\n\r\n  // WebSocket connection logic\r\n  const connectWebSocket = () => {\r\n    const ws = new window.WebSocket(\r\n      window.location.protocol === 'https:'\r\n        ? 'wss://' + window.location.host + '/api/genai-audio'\r\n        : 'ws://' + window.location.hostname + ':5050/api/genai-audio'\r\n    );\r\n    ws.binaryType = 'arraybuffer';\r\n    ws.onopen = () => {\r\n      setStatus('WebSocket connected.');\r\n    };\r\n    ws.onmessage = async (event) => {\r\n      try {\r\n        const msg = JSON.parse(event.data);\r\n        if (msg.type === 'status') {\r\n          setStatus(msg.message);\r\n        } else if (msg.type === 'error') {\r\n          setError(msg.message);\r\n        // CHANGE: Enhanced interruption handling with turn tracking\r\n        } else if (msg.type === 'interrupt') {\r\n          handleInterruption(msg.turnId, msg.timestamp);\r\n        // CHANGE: Added generation start tracking\r\n        } else if (msg.type === 'generation_start') {\r\n          setIsAIGenerating(true);\r\n          currentTurnIdRef.current = msg.turnId;\r\n          console.log(`AI generation started for turn: ${msg.turnId}`);\r\n        } else if (msg.type === 'audio' && msg.data) {\r\n          const arrayBuffer = base64ToArrayBuffer(msg.data);\r\n          console.log(\"decoding\", arrayBuffer)\r\n          const audioBuffer = await decodeAudioData(arrayBuffer);\r\n          console.log(\"will play\")\r\n          // CHANGE: Pass current turn ID to playback function\r\n          playAudioBuffer(audioBuffer, currentTurnIdRef.current);\r\n        }\r\n      } catch (err) {\r\n        setError('Error handling message: ' + err.message);\r\n      }\r\n    };\r\n    ws.onerror = (e) => {\r\n      setError('WebSocket error');\r\n    };\r\n    ws.onclose = () => {\r\n      setStatus('WebSocket closed.');\r\n    };\r\n    wsRef.current = ws;\r\n  };\r\n\r\n  const closeWebSocket = () => {\r\n    if (wsRef.current) {\r\n      wsRef.current.close();\r\n      wsRef.current = null;\r\n    }\r\n  };\r\n\r\nconst startRecording = async () => {\r\n  if (isRecordingRef.current) return;\r\n  \r\n  initAudio();\r\n  await inputAudioContextRef.current.resume();\r\n  setStatus('Requesting microphone access...');\r\n  \r\n  try {\r\n    const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\r\n    mediaStreamRef.current = mediaStream;\r\n    setStatus('Microphone access granted. Starting capture...');\r\n    \r\n    connectWebSocket();\r\n    \r\n    const sourceNode = inputAudioContextRef.current.createMediaStreamSource(mediaStream);\r\n    sourceNodeRef.current = sourceNode;\r\n    sourceNode.connect(inputNodeRef.current);\r\n    \r\n    const bufferSize = 256;\r\n    const scriptProcessorNode = inputAudioContextRef.current.createScriptProcessor(bufferSize, 1, 1);\r\n    \r\n    scriptProcessorNode.onaudioprocess = (audioProcessingEvent) => {\r\n      if (!isRecordingRef.current) return;\r\n      \r\n      const inputBuffer = audioProcessingEvent.inputBuffer;\r\n      const pcmData = inputBuffer.getChannelData(0); // Float32Array (-1 to 1)\r\n      \r\n      // Convert to 16-bit PCM properly\r\n      const int16Array = new Int16Array(pcmData.length);\r\n      for (let i = 0; i < pcmData.length; i++) {\r\n        // Scale from [-1, 1] to [-32768, 32767]\r\n        int16Array[i] = Math.max(-32768, Math.min(32767, Math.floor(pcmData[i] * 32767)));\r\n      }\r\n      \r\n      // Send raw PCM buffer directly (lower latency than WAV)\r\n      try {\r\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n          wsRef.current.send(int16Array.buffer);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error sending PCM:', err);\r\n      }\r\n    };\r\n    \r\n    sourceNode.connect(scriptProcessorNode);\r\n    scriptProcessorNode.connect(inputAudioContextRef.current.destination);\r\n    scriptProcessorNodeRef.current = scriptProcessorNode;\r\n    \r\n    // Update both state and ref\r\n    setIsRecording(true);\r\n    isRecordingRef.current = true;\r\n    setStatus('ðŸ”´ Recording... Capturing PCM chunks.');\r\n    \r\n  } catch (err) {\r\n    setError(`Error: ${err.message}`);\r\n    setStatus('Error starting recording');\r\n    stopRecording();\r\n  }\r\n};\r\n\r\n  const stopRecording = () => {\r\n    setStatus('Stopping recording...');\r\n    setIsRecording(false);\r\n    isRecordingRef.current = false;\r\n    \r\n    if (scriptProcessorNodeRef.current && sourceNodeRef.current && inputAudioContextRef.current) {\r\n      scriptProcessorNodeRef.current.disconnect();\r\n      sourceNodeRef.current.disconnect();\r\n    }\r\n    scriptProcessorNodeRef.current = null;\r\n    sourceNodeRef.current = null;\r\n    \r\n    if (mediaStreamRef.current) {\r\n      mediaStreamRef.current.getTracks().forEach((track) => track.stop());\r\n      mediaStreamRef.current = null;\r\n    }\r\n    sourcesRef.current.forEach((source) => {\r\n      try {\r\n        source.stop();\r\n      } catch (error) {\r\n        console.log('Source already stopped:', error);\r\n      }\r\n    });\r\n    sourcesRef.current.clear();\r\n    \r\n    closeWebSocket();\r\n    \r\n    if (inputAudioContextRef.current && inputAudioContextRef.current.state !== 'closed') {\r\n      inputAudioContextRef.current.close();\r\n      inputAudioContextRef.current = null;\r\n    }\r\n    if (outputAudioContextRef.current && outputAudioContextRef.current.state !== 'closed') {\r\n      outputAudioContextRef.current.close();\r\n      outputAudioContextRef.current = null;\r\n    }\r\n    setStatus('Recording stopped. Click Start to begin again.');\r\n  };\r\n\r\n  const reset = () => {\r\n    stopRecording();\r\n    setStatus('Session cleared.');\r\n  };\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    initAudio();\r\n    return () => {\r\n      stopRecording();\r\n      if (inputAudioContextRef.current && inputAudioContextRef.current.state !== 'closed') {\r\n        inputAudioContextRef.current.close();\r\n        inputAudioContextRef.current = null;\r\n      }\r\n      if (outputAudioContextRef.current && outputAudioContextRef.current.state !== 'closed') {\r\n        outputAudioContextRef.current.close();\r\n        outputAudioContextRef.current = null;\r\n      }\r\n      closeWebSocket();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ position: 'relative', minHeight: '100vh', background: '#222', color: '#fff' }}>\r\n      <div className=\"controls\" style={{ position: 'absolute', bottom: '10vh', left: 0, right: 0, display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', gap: 10, zIndex: 10 }}>\r\n        <button\r\n          id=\"resetButton\"\r\n          onClick={reset}\r\n          disabled={isRecording}\r\n          style={{ outline: 'none', border: '1px solid rgba(255,255,255,0.2)', color: 'white', borderRadius: 12, background: 'rgba(255,255,255,0.1)', width: 64, height: 64, cursor: 'pointer', fontSize: 24, padding: 0, margin: 0 }}\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"40px\" viewBox=\"0 -960 960 960\" width=\"40px\" fill=\"#ffffff\">\r\n            <path d=\"M480-160q-134 0-227-93t-93-227q0-134 93-227t227-93q69 0 132 28.5T720-690v-110h80v280H520v-80h168q-32-56-87.5-88T480-720q-100 0-170 70t-70 170q0 100 70 170t170 70q77 0 139-44t87-116h84q-28 106-114 173t-196 67Z\" />\r\n          </svg>\r\n        </button>\r\n        <button\r\n          id=\"startButton\"\r\n          onClick={startRecording}\r\n          disabled={isRecording}\r\n          style={{ outline: 'none', border: '1px solid rgba(255,255,255,0.2)', color: 'white', borderRadius: 12, background: 'rgba(255,255,255,0.1)', width: 64, height: 64, cursor: 'pointer', fontSize: 24, padding: 0, margin: 0 }}\r\n        >\r\n          <svg viewBox=\"0 0 100 100\" width=\"32px\" height=\"32px\" fill=\"#c80000\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <circle cx=\"50\" cy=\"50\" r=\"50\" />\r\n          </svg>\r\n        </button>\r\n        <button\r\n          id=\"stopButton\"\r\n          onClick={stopRecording}\r\n          disabled={!isRecording}\r\n          style={{ outline: 'none', border: '1px solid rgba(255,255,255,0.2)', color: 'white', borderRadius: 12, background: 'rgba(255,255,255,0.1)', width: 64, height: 64, cursor: 'pointer', fontSize: 24, padding: 0, margin: 0 }}\r\n        >\r\n          <svg viewBox=\"0 0 100 100\" width=\"32px\" height=\"32px\" fill=\"#000000\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" rx=\"15\" />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n      <div id=\"status\" style={{ position: 'absolute', bottom: '5vh', left: 0, right: 0, zIndex: 10, textAlign: 'center' }}>{error || status}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}