{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\OneDrive\\\\Desktop\\\\revolt\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport botLogo from './bot.png';\nimport bikeImage from './Bike.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [status, setStatus] = useState('');\n  const [error, setError] = useState('');\n  const [isAIGenerating, setIsAIGenerating] = useState(false);\n\n  // Refs for audio context and nodes\n  const inputAudioContextRef = useRef(null);\n  const outputAudioContextRef = useRef(null);\n  const inputNodeRef = useRef(null);\n  const outputNodeRef = useRef(null);\n  const mediaStreamRef = useRef(null);\n  const sourceNodeRef = useRef(null);\n  const scriptProcessorNodeRef = useRef(null);\n  const nextStartTimeRef = useRef(0);\n  const sourcesRef = useRef(new Set());\n  const wsRef = useRef(null);\n  const isRecordingRef = useRef(false); // Additional ref for real-time recording state\n  const currentTurnIdRef = useRef(null);\n  const lastInterruptTimeRef = useRef(0);\n\n  // Helper to create a new AudioContext\n  const createInputAudioContext = () => {\n    const ctx = new (window.AudioContext || window.webkitAudioContext)({\n      sampleRate: 16000\n    });\n    inputNodeRef.current = ctx.createGain();\n    inputAudioContextRef.current = ctx;\n    return ctx;\n  };\n  const createOutputAudioContext = () => {\n    const ctx = new (window.AudioContext || window.webkitAudioContext)({\n      sampleRate: 24000\n    });\n    outputNodeRef.current = ctx.createGain();\n    outputNodeRef.current.connect(ctx.destination);\n    outputAudioContextRef.current = ctx;\n    return ctx;\n  };\n\n  // Initialize audio contexts (create new if closed or null)\n  const initAudio = () => {\n    if (!inputAudioContextRef.current || inputAudioContextRef.current.state === 'closed') {\n      createInputAudioContext();\n    }\n    if (!outputAudioContextRef.current || outputAudioContextRef.current.state === 'closed') {\n      createOutputAudioContext();\n    }\n    nextStartTimeRef.current = outputAudioContextRef.current.currentTime;\n  };\n\n  // Helper to decode base64 to ArrayBuffer\n  function base64ToArrayBuffer(base64String) {\n    try {\n      // 1. Validate input\n      if (typeof base64String !== 'string' || base64String.length === 0) {\n        throw new Error('Invalid base64 string input');\n      }\n\n      // 2. Clean and prepare base64\n      const cleanBase64 = base64String.replace(/^data:[^;]+;base64,/, '').replace(/\\s+/g, '');\n\n      // 3. Calculate and add padding if needed\n      // const padLength = (4 - (cleanBase64.length % 4)) % 4;\n      // const paddedBase64 = cleanBase64 + '='.repeat(padLength);\n\n      // 4. Convert to binary string\n      const binaryString = atob(cleanBase64);\n\n      // 5. Create NEW ArrayBuffer in one step (critical fix)\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n\n      // 6. Return the buffer (bytes.buffer is guaranteed fresh)\n      return bytes.buffer;\n    } catch (error) {\n      console.error('Conversion failed:', {\n        error: error.message,\n        inputSample: base64String === null || base64String === void 0 ? void 0 : base64String.slice(0, 30),\n        inputLength: base64String === null || base64String === void 0 ? void 0 : base64String.length\n      });\n      throw new Error(`Audio conversion failed: ${error.message}`);\n    }\n  }\n\n  // Helper to play audio buffer\n  const playAudioBuffer = async (audioBuffer, turnId = null) => {\n    // Don't play audio from interrupted turns\n    if (turnId && turnId !== currentTurnIdRef.current) {\n      console.log(`Skipping audio from interrupted turn: ${turnId}`);\n      return;\n    }\n    console.log(\"will play\", audioBuffer);\n    const source = outputAudioContextRef.current.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(outputNodeRef.current);\n    source.onended = () => {\n      sourcesRef.current.delete(source);\n    };\n\n    // CHANGE: Improved timing management for interruptions\n    const now = outputAudioContextRef.current.currentTime;\n    const startTime = Math.max(nextStartTimeRef.current, now + 0.01); // Small buffer to prevent timing issues\n\n    try {\n      source.start(startTime);\n      nextStartTimeRef.current = startTime + audioBuffer.duration;\n      sourcesRef.current.add(source);\n    } catch (error) {\n      console.error('Error starting audio source:', error);\n    }\n  };\n\n  // Helper to decode PCM audio (assume 24kHz mono float32 PCM or WAV)\n  async function decodeAudioData(arrayBuffer) {\n    try {\n      // Gemini Live API returns raw 16-bit little-endian PCM at 24kHz\n      const view = new DataView(arrayBuffer);\n      // 16-bit = 2 bytes per sample\n      const sampleCount = arrayBuffer.byteLength / 2;\n      const float32Array = new Float32Array(sampleCount);\n\n      // Convert 16-bit PCM to Float32 with proper scaling\n      for (let i = 0; i < sampleCount; i++) {\n        const int16Sample = view.getInt16(i * 2, true); // little-endian\n        // Convert to float32 range [-1, 1] with proper scaling\n        float32Array[i] = int16Sample / (int16Sample < 0 ? 32768 : 32767);\n      }\n\n      // Create AudioBuffer with Gemini's native sample rate (24kHz)\n      const audioBuffer = outputAudioContextRef.current.createBuffer(1,\n      // mono channel\n      sampleCount,\n      // length in samples\n      24000 // Gemini's output sample rate\n      );\n      audioBuffer.copyToChannel(float32Array, 0);\n      return audioBuffer;\n    } catch (error) {\n      console.error('Audio decode failed:', error);\n      throw new Error('Audio decode failed: ' + error.message);\n    }\n  }\n  const handleInterruption = (turnId, timestamp) => {\n    const now = Date.now();\n\n    // Prevent duplicate interruption handling\n    if (now - lastInterruptTimeRef.current < 100) {\n      return;\n    }\n    lastInterruptTimeRef.current = now;\n    console.log(`Handling interruption for turn ${turnId} at ${timestamp}`);\n\n    // Stop all active audio sources immediately\n    sourcesRef.current.forEach(source => {\n      try {\n        source.stop();\n      } catch (error) {\n        console.log('Source already stopped or invalid:', error);\n      }\n    });\n    sourcesRef.current.clear();\n\n    // CHANGE: Proper timing reset - use current time, not 0\n    nextStartTimeRef.current = outputAudioContextRef.current.currentTime;\n\n    // Reset generation state\n    setIsAIGenerating(false);\n    currentTurnIdRef.current = null;\n    console.log('Interruption handled: Playback stopped and timing reset.');\n  };\n\n  // WebSocket connection logic\n  const connectWebSocket = () => {\n    const ws = new window.WebSocket(window.location.protocol === 'https:' ? 'wss://' + window.location.host + '/api/genai-audio' : 'ws://' + window.location.hostname + ':5050/api/genai-audio');\n    ws.binaryType = 'arraybuffer';\n    ws.onopen = () => {\n      setStatus('WebSocket connected.');\n    };\n    ws.onmessage = async event => {\n      try {\n        const msg = JSON.parse(event.data);\n        if (msg.type === 'status') {\n          setStatus(msg.message);\n        } else if (msg.type === 'error') {\n          setError(msg.message);\n          // CHANGE: Enhanced interruption handling with turn tracking\n        } else if (msg.type === 'interrupt') {\n          handleInterruption(msg.turnId, msg.timestamp);\n          // CHANGE: Added generation start tracking\n        } else if (msg.type === 'generation_start') {\n          setIsAIGenerating(true);\n          currentTurnIdRef.current = msg.turnId;\n          console.log(`AI generation started for turn: ${msg.turnId}`);\n        } else if (msg.type === 'audio' && msg.data) {\n          const arrayBuffer = base64ToArrayBuffer(msg.data);\n          console.log(\"decoding\", arrayBuffer);\n          const audioBuffer = await decodeAudioData(arrayBuffer);\n          console.log(\"will play\");\n          // CHANGE: Pass current turn ID to playback function\n          playAudioBuffer(audioBuffer, currentTurnIdRef.current);\n        }\n      } catch (err) {\n        setError('Error handling message: ' + err.message);\n      }\n    };\n    ws.onerror = e => {\n      setError('WebSocket error');\n    };\n    ws.onclose = () => {\n      setStatus('WebSocket closed.');\n    };\n    wsRef.current = ws;\n  };\n  const closeWebSocket = () => {\n    if (wsRef.current) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n  };\n  const startRecording = async () => {\n    if (isRecordingRef.current) return;\n    initAudio();\n    await inputAudioContextRef.current.resume();\n    setStatus('Requesting microphone access...');\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      });\n      mediaStreamRef.current = mediaStream;\n      setStatus('Microphone access granted. Starting capture...');\n      connectWebSocket();\n      const sourceNode = inputAudioContextRef.current.createMediaStreamSource(mediaStream);\n      sourceNodeRef.current = sourceNode;\n      sourceNode.connect(inputNodeRef.current);\n      const bufferSize = 256;\n      const scriptProcessorNode = inputAudioContextRef.current.createScriptProcessor(bufferSize, 1, 1);\n      scriptProcessorNode.onaudioprocess = audioProcessingEvent => {\n        if (!isRecordingRef.current) return;\n        const inputBuffer = audioProcessingEvent.inputBuffer;\n        const pcmData = inputBuffer.getChannelData(0); // Float32Array (-1 to 1)\n\n        // Convert to 16-bit PCM properly\n        const int16Array = new Int16Array(pcmData.length);\n        for (let i = 0; i < pcmData.length; i++) {\n          // Scale from [-1, 1] to [-32768, 32767]\n          int16Array[i] = Math.max(-32768, Math.min(32767, Math.floor(pcmData[i] * 32767)));\n        }\n\n        // Send raw PCM buffer directly (lower latency than WAV)\n        try {\n          var _wsRef$current;\n          if (((_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.readyState) === WebSocket.OPEN) {\n            wsRef.current.send(int16Array.buffer);\n          }\n        } catch (err) {\n          console.error('Error sending PCM:', err);\n        }\n      };\n      sourceNode.connect(scriptProcessorNode);\n      scriptProcessorNode.connect(inputAudioContextRef.current.destination);\n      scriptProcessorNodeRef.current = scriptProcessorNode;\n\n      // Update both state and ref\n      setIsRecording(true);\n      isRecordingRef.current = true;\n      setStatus('🔴 Recording... Capturing PCM chunks.');\n    } catch (err) {\n      setError(`Error: ${err.message}`);\n      setStatus('Error starting recording');\n      stopRecording();\n    }\n  };\n  const stopRecording = () => {\n    setStatus('Stopping recording...');\n    setIsRecording(false);\n    isRecordingRef.current = false;\n    if (scriptProcessorNodeRef.current && sourceNodeRef.current && inputAudioContextRef.current) {\n      scriptProcessorNodeRef.current.disconnect();\n      sourceNodeRef.current.disconnect();\n    }\n    scriptProcessorNodeRef.current = null;\n    sourceNodeRef.current = null;\n    if (mediaStreamRef.current) {\n      mediaStreamRef.current.getTracks().forEach(track => track.stop());\n      mediaStreamRef.current = null;\n    }\n    sourcesRef.current.forEach(source => {\n      try {\n        source.stop();\n      } catch (error) {\n        console.log('Source already stopped:', error);\n      }\n    });\n    sourcesRef.current.clear();\n    closeWebSocket();\n    if (inputAudioContextRef.current && inputAudioContextRef.current.state !== 'closed') {\n      inputAudioContextRef.current.close();\n      inputAudioContextRef.current = null;\n    }\n    if (outputAudioContextRef.current && outputAudioContextRef.current.state !== 'closed') {\n      outputAudioContextRef.current.close();\n      outputAudioContextRef.current = null;\n    }\n    setStatus('Recording stopped. Click Start to begin again.');\n  };\n  const reset = () => {\n    stopRecording();\n    setStatus('Session cleared.');\n  };\n\n  // Cleanup on unmount\n  useEffect(() => {\n    initAudio();\n    return () => {\n      stopRecording();\n      if (inputAudioContextRef.current && inputAudioContextRef.current.state !== 'closed') {\n        inputAudioContextRef.current.close();\n        inputAudioContextRef.current = null;\n      }\n      if (outputAudioContextRef.current && outputAudioContextRef.current.state !== 'closed') {\n        outputAudioContextRef.current.close();\n        outputAudioContextRef.current = null;\n      }\n      closeWebSocket();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      minHeight: '100vh',\n      background: '#222',\n      color: '#fff'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        marginTop: 30\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: botLogo,\n        alt: \"AI Bot\",\n        className: \"bot-avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"bot-title\",\n      children: \"Revolt AI Voice Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bot-intro\",\n      children: [\"This bot provides helpful information about \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Revolt Motors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 51\n      }, this), \" in multiple languages.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 94\n      }, this), \"Ask anything about Revolt models, electric bikes, dealerships, charging, and features!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"startButton\",\n        className: \"start-btn\",\n        onClick: startRecording,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"start\",\n          children: \"\\u25B6\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 9\n        }, this), \" Start\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"stopButton\",\n        className: \"stop-btn\",\n        onClick: stopRecording,\n        disabled: !isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"stop\",\n          children: \"\\u23F9\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 9\n        }, this), \" Stop\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"resetButton\",\n        className: \"reset-btn\",\n        onClick: reset,\n        disabled: isRecording,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"img\",\n          \"aria-label\": \"reset\",\n          children: \"\\uD83D\\uDD04\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 9\n        }, this), \" Reset\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        margin: '12px 0 18px 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: bikeImage,\n        alt: \"Revolt Bike\",\n        style: {\n          width: \"210px\",\n          height: \"auto\",\n          borderRadius: \"12px\",\n          boxShadow: \"0 2px 14px #0008\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: error ? \"status-text error\" : \"status-text\",\n      style: {\n        position: 'absolute',\n        bottom: '5vh',\n        left: 0,\n        right: 0,\n        zIndex: 10,\n        textAlign: 'center'\n      },\n      children: error || status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"rQ2PbdBjoHDPjZNnRYL9fKKdXVI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","botLogo","bikeImage","jsxDEV","_jsxDEV","App","_s","isRecording","setIsRecording","status","setStatus","error","setError","isAIGenerating","setIsAIGenerating","inputAudioContextRef","outputAudioContextRef","inputNodeRef","outputNodeRef","mediaStreamRef","sourceNodeRef","scriptProcessorNodeRef","nextStartTimeRef","sourcesRef","Set","wsRef","isRecordingRef","currentTurnIdRef","lastInterruptTimeRef","createInputAudioContext","ctx","window","AudioContext","webkitAudioContext","sampleRate","current","createGain","createOutputAudioContext","connect","destination","initAudio","state","currentTime","base64ToArrayBuffer","base64String","length","Error","cleanBase64","replace","binaryString","atob","bytes","Uint8Array","i","charCodeAt","buffer","console","message","inputSample","slice","inputLength","playAudioBuffer","audioBuffer","turnId","log","source","createBufferSource","onended","delete","now","startTime","Math","max","start","duration","add","decodeAudioData","arrayBuffer","view","DataView","sampleCount","byteLength","float32Array","Float32Array","int16Sample","getInt16","createBuffer","copyToChannel","handleInterruption","timestamp","Date","forEach","stop","clear","connectWebSocket","ws","WebSocket","location","protocol","host","hostname","binaryType","onopen","onmessage","event","msg","JSON","parse","data","type","err","onerror","e","onclose","closeWebSocket","close","startRecording","resume","mediaStream","navigator","mediaDevices","getUserMedia","audio","video","sourceNode","createMediaStreamSource","bufferSize","scriptProcessorNode","createScriptProcessor","onaudioprocess","audioProcessingEvent","inputBuffer","pcmData","getChannelData","int16Array","Int16Array","min","floor","_wsRef$current","readyState","OPEN","send","stopRecording","disconnect","getTracks","track","reset","style","minHeight","background","color","children","display","justifyContent","marginTop","src","alt","className","fileName","_jsxFileName","lineNumber","columnNumber","id","onClick","disabled","role","margin","width","height","borderRadius","boxShadow","position","bottom","left","right","zIndex","textAlign","_c","$RefreshReg$"],"sources":["C:/Users/Asus/OneDrive/Desktop/revolt/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './App.css';\r\nimport botLogo from './bot.png';\r\nimport bikeImage from './Bike.png'; \r\n\r\nfunction App() {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [status, setStatus] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isAIGenerating, setIsAIGenerating] = useState(false);\r\n\r\n  // Refs for audio context and nodes\r\n  const inputAudioContextRef = useRef(null);\r\n  const outputAudioContextRef = useRef(null);\r\n  const inputNodeRef = useRef(null);\r\n  const outputNodeRef = useRef(null);\r\n  const mediaStreamRef = useRef(null);\r\n  const sourceNodeRef = useRef(null);\r\n  const scriptProcessorNodeRef = useRef(null);\r\n  const nextStartTimeRef = useRef(0);\r\n  const sourcesRef = useRef(new Set());\r\n  const wsRef = useRef(null);\r\n  const isRecordingRef = useRef(false); // Additional ref for real-time recording state\r\n  const currentTurnIdRef = useRef(null);\r\n  const lastInterruptTimeRef = useRef(0);\r\n\r\n  // Helper to create a new AudioContext\r\n  const createInputAudioContext = () => {\r\n    const ctx = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 16000 });\r\n    inputNodeRef.current = ctx.createGain();\r\n    inputAudioContextRef.current = ctx;\r\n    return ctx;\r\n  };\r\n\r\n  const createOutputAudioContext = () => {\r\n    const ctx = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 24000 });\r\n    outputNodeRef.current = ctx.createGain();\r\n    outputNodeRef.current.connect(ctx.destination);\r\n    outputAudioContextRef.current = ctx;\r\n    return ctx;\r\n  };\r\n\r\n  // Initialize audio contexts (create new if closed or null)\r\n  const initAudio = () => {\r\n    if (!inputAudioContextRef.current || inputAudioContextRef.current.state === 'closed') {\r\n      createInputAudioContext();\r\n    }\r\n    if (!outputAudioContextRef.current || outputAudioContextRef.current.state === 'closed') {\r\n      createOutputAudioContext();\r\n    }\r\n    nextStartTimeRef.current = outputAudioContextRef.current.currentTime;\r\n  };\r\n\r\n  // Helper to decode base64 to ArrayBuffer\r\n  function base64ToArrayBuffer(base64String) {\r\n    try {\r\n      // 1. Validate input\r\n      if (typeof base64String !== 'string' || base64String.length === 0) {\r\n        throw new Error('Invalid base64 string input');\r\n      }\r\n\r\n      // 2. Clean and prepare base64\r\n      const cleanBase64 = base64String\r\n        .replace(/^data:[^;]+;base64,/, '')\r\n        .replace(/\\s+/g, '');\r\n\r\n      // 3. Calculate and add padding if needed\r\n      // const padLength = (4 - (cleanBase64.length % 4)) % 4;\r\n      // const paddedBase64 = cleanBase64 + '='.repeat(padLength);\r\n\r\n      // 4. Convert to binary string\r\n      const binaryString = atob(cleanBase64);\r\n\r\n      // 5. Create NEW ArrayBuffer in one step (critical fix)\r\n      const bytes = new Uint8Array(binaryString.length);\r\n      for (let i = 0; i < binaryString.length; i++) {\r\n        bytes[i] = binaryString.charCodeAt(i);\r\n      }\r\n\r\n      // 6. Return the buffer (bytes.buffer is guaranteed fresh)\r\n      return bytes.buffer;\r\n    } catch (error) {\r\n      console.error('Conversion failed:', {\r\n        error: error.message,\r\n        inputSample: base64String?.slice(0, 30),\r\n        inputLength: base64String?.length\r\n      });\r\n      throw new Error(`Audio conversion failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Helper to play audio buffer\r\n  const playAudioBuffer = async (audioBuffer, turnId = null) => {\r\n    // Don't play audio from interrupted turns\r\n    if (turnId && turnId !== currentTurnIdRef.current) {\r\n      console.log(`Skipping audio from interrupted turn: ${turnId}`);\r\n      return;\r\n    }\r\n\r\n    console.log(\"will play\", audioBuffer)\r\n    const source = outputAudioContextRef.current.createBufferSource();\r\n    source.buffer = audioBuffer;\r\n    source.connect(outputNodeRef.current);\r\n    \r\n    source.onended = () => {\r\n      sourcesRef.current.delete(source);\r\n    };\r\n    \r\n    // CHANGE: Improved timing management for interruptions\r\n    const now = outputAudioContextRef.current.currentTime;\r\n    const startTime = Math.max(nextStartTimeRef.current, now + 0.01); // Small buffer to prevent timing issues\r\n    \r\n    try {\r\n      source.start(startTime);\r\n      nextStartTimeRef.current = startTime + audioBuffer.duration;\r\n      sourcesRef.current.add(source);\r\n    } catch (error) {\r\n      console.error('Error starting audio source:', error);\r\n    }\r\n  };\r\n\r\n  // Helper to decode PCM audio (assume 24kHz mono float32 PCM or WAV)\r\n  async function decodeAudioData(arrayBuffer) {\r\n    try {\r\n      // Gemini Live API returns raw 16-bit little-endian PCM at 24kHz\r\n      const view = new DataView(arrayBuffer);\r\n      // 16-bit = 2 bytes per sample\r\n      const sampleCount = arrayBuffer.byteLength / 2;\r\n      const float32Array = new Float32Array(sampleCount);\r\n  \r\n      // Convert 16-bit PCM to Float32 with proper scaling\r\n      for (let i = 0; i < sampleCount; i++) {\r\n        const int16Sample = view.getInt16(i * 2, true); // little-endian\r\n        // Convert to float32 range [-1, 1] with proper scaling\r\n        float32Array[i] = int16Sample / (int16Sample < 0 ? 32768 : 32767);\r\n      }\r\n  \r\n      // Create AudioBuffer with Gemini's native sample rate (24kHz)\r\n      const audioBuffer = outputAudioContextRef.current.createBuffer(\r\n        1,         // mono channel\r\n        sampleCount, // length in samples\r\n        24000      // Gemini's output sample rate\r\n      );\r\n  \r\n      audioBuffer.copyToChannel(float32Array, 0);\r\n      return audioBuffer;\r\n  \r\n    } catch (error) {\r\n      console.error('Audio decode failed:', error);\r\n      throw new Error('Audio decode failed: ' + error.message);\r\n    }\r\n  }\r\n  const handleInterruption = (turnId, timestamp) => {\r\n    const now = Date.now();\r\n    \r\n    // Prevent duplicate interruption handling\r\n    if (now - lastInterruptTimeRef.current < 100) {\r\n      return;\r\n    }\r\n    lastInterruptTimeRef.current = now;\r\n\r\n    console.log(`Handling interruption for turn ${turnId} at ${timestamp}`);\r\n    \r\n    // Stop all active audio sources immediately\r\n    sourcesRef.current.forEach((source) => {\r\n      try {\r\n        source.stop();\r\n      } catch (error) {\r\n        console.log('Source already stopped or invalid:', error);\r\n      }\r\n    });\r\n    sourcesRef.current.clear();\r\n    \r\n    // CHANGE: Proper timing reset - use current time, not 0\r\n    nextStartTimeRef.current = outputAudioContextRef.current.currentTime;\r\n    \r\n    // Reset generation state\r\n    setIsAIGenerating(false);\r\n    currentTurnIdRef.current = null;\r\n    \r\n    console.log('Interruption handled: Playback stopped and timing reset.');\r\n  };\r\n\r\n  // WebSocket connection logic\r\n  const connectWebSocket = () => {\r\n    const ws = new window.WebSocket(\r\n      window.location.protocol === 'https:'\r\n        ? 'wss://' + window.location.host + '/api/genai-audio'\r\n        : 'ws://' + window.location.hostname + ':5050/api/genai-audio'\r\n    );\r\n    ws.binaryType = 'arraybuffer';\r\n    ws.onopen = () => {\r\n      setStatus('WebSocket connected.');\r\n    };\r\n    ws.onmessage = async (event) => {\r\n      try {\r\n        const msg = JSON.parse(event.data);\r\n        if (msg.type === 'status') {\r\n          setStatus(msg.message);\r\n        } else if (msg.type === 'error') {\r\n          setError(msg.message);\r\n        // CHANGE: Enhanced interruption handling with turn tracking\r\n        } else if (msg.type === 'interrupt') {\r\n          handleInterruption(msg.turnId, msg.timestamp);\r\n        // CHANGE: Added generation start tracking\r\n        } else if (msg.type === 'generation_start') {\r\n          setIsAIGenerating(true);\r\n          currentTurnIdRef.current = msg.turnId;\r\n          console.log(`AI generation started for turn: ${msg.turnId}`);\r\n        } else if (msg.type === 'audio' && msg.data) {\r\n          const arrayBuffer = base64ToArrayBuffer(msg.data);\r\n          console.log(\"decoding\", arrayBuffer)\r\n          const audioBuffer = await decodeAudioData(arrayBuffer);\r\n          console.log(\"will play\")\r\n          // CHANGE: Pass current turn ID to playback function\r\n          playAudioBuffer(audioBuffer, currentTurnIdRef.current);\r\n        }\r\n      } catch (err) {\r\n        setError('Error handling message: ' + err.message);\r\n      }\r\n    };\r\n    ws.onerror = (e) => {\r\n      setError('WebSocket error');\r\n    };\r\n    ws.onclose = () => {\r\n      setStatus('WebSocket closed.');\r\n    };\r\n    wsRef.current = ws;\r\n  };\r\n\r\n  const closeWebSocket = () => {\r\n    if (wsRef.current) {\r\n      wsRef.current.close();\r\n      wsRef.current = null;\r\n    }\r\n  };\r\n\r\nconst startRecording = async () => {\r\n  if (isRecordingRef.current) return;\r\n  \r\n  initAudio();\r\n  await inputAudioContextRef.current.resume();\r\n  setStatus('Requesting microphone access...');\r\n  \r\n  try {\r\n    const mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false });\r\n    mediaStreamRef.current = mediaStream;\r\n    setStatus('Microphone access granted. Starting capture...');\r\n    \r\n    connectWebSocket();\r\n    \r\n    const sourceNode = inputAudioContextRef.current.createMediaStreamSource(mediaStream);\r\n    sourceNodeRef.current = sourceNode;\r\n    sourceNode.connect(inputNodeRef.current);\r\n    \r\n    const bufferSize = 256;\r\n    const scriptProcessorNode = inputAudioContextRef.current.createScriptProcessor(bufferSize, 1, 1);\r\n    \r\n    scriptProcessorNode.onaudioprocess = (audioProcessingEvent) => {\r\n      if (!isRecordingRef.current) return;\r\n      \r\n      const inputBuffer = audioProcessingEvent.inputBuffer;\r\n      const pcmData = inputBuffer.getChannelData(0); // Float32Array (-1 to 1)\r\n      \r\n      // Convert to 16-bit PCM properly\r\n      const int16Array = new Int16Array(pcmData.length);\r\n      for (let i = 0; i < pcmData.length; i++) {\r\n        // Scale from [-1, 1] to [-32768, 32767]\r\n        int16Array[i] = Math.max(-32768, Math.min(32767, Math.floor(pcmData[i] * 32767)));\r\n      }\r\n      \r\n      // Send raw PCM buffer directly (lower latency than WAV)\r\n      try {\r\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n          wsRef.current.send(int16Array.buffer);\r\n        }\r\n      } catch (err) {\r\n        console.error('Error sending PCM:', err);\r\n      }\r\n    };\r\n    \r\n    sourceNode.connect(scriptProcessorNode);\r\n    scriptProcessorNode.connect(inputAudioContextRef.current.destination);\r\n    scriptProcessorNodeRef.current = scriptProcessorNode;\r\n    \r\n    // Update both state and ref\r\n    setIsRecording(true);\r\n    isRecordingRef.current = true;\r\n    setStatus('🔴 Recording... Capturing PCM chunks.');\r\n    \r\n  } catch (err) {\r\n    setError(`Error: ${err.message}`);\r\n    setStatus('Error starting recording');\r\n    stopRecording();\r\n  }\r\n};\r\n\r\n  const stopRecording = () => {\r\n    setStatus('Stopping recording...');\r\n    setIsRecording(false);\r\n    isRecordingRef.current = false;\r\n    \r\n    if (scriptProcessorNodeRef.current && sourceNodeRef.current && inputAudioContextRef.current) {\r\n      scriptProcessorNodeRef.current.disconnect();\r\n      sourceNodeRef.current.disconnect();\r\n    }\r\n    scriptProcessorNodeRef.current = null;\r\n    sourceNodeRef.current = null;\r\n    \r\n    if (mediaStreamRef.current) {\r\n      mediaStreamRef.current.getTracks().forEach((track) => track.stop());\r\n      mediaStreamRef.current = null;\r\n    }\r\n    sourcesRef.current.forEach((source) => {\r\n      try {\r\n        source.stop();\r\n      } catch (error) {\r\n        console.log('Source already stopped:', error);\r\n      }\r\n    });\r\n    sourcesRef.current.clear();\r\n    \r\n    closeWebSocket();\r\n    \r\n    if (inputAudioContextRef.current && inputAudioContextRef.current.state !== 'closed') {\r\n      inputAudioContextRef.current.close();\r\n      inputAudioContextRef.current = null;\r\n    }\r\n    if (outputAudioContextRef.current && outputAudioContextRef.current.state !== 'closed') {\r\n      outputAudioContextRef.current.close();\r\n      outputAudioContextRef.current = null;\r\n    }\r\n    setStatus('Recording stopped. Click Start to begin again.');\r\n  };\r\n\r\n  const reset = () => {\r\n    stopRecording();\r\n    setStatus('Session cleared.');\r\n  };\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    initAudio();\r\n    return () => {\r\n      stopRecording();\r\n      if (inputAudioContextRef.current && inputAudioContextRef.current.state !== 'closed') {\r\n        inputAudioContextRef.current.close();\r\n        inputAudioContextRef.current = null;\r\n      }\r\n      if (outputAudioContextRef.current && outputAudioContextRef.current.state !== 'closed') {\r\n        outputAudioContextRef.current.close();\r\n        outputAudioContextRef.current = null;\r\n      }\r\n      closeWebSocket();\r\n    };\r\n  }, []);\r\n\r\nreturn (\r\n  <div style={{ minHeight: '100vh', background: '#222', color: '#fff' }}>\r\n    {/* Bot image and title at the top */}\r\n    <div style={{ display: 'flex', justifyContent: 'center', marginTop: 30 }}>\r\n      <img\r\n        src={botLogo}\r\n        alt=\"AI Bot\"\r\n        className=\"bot-avatar\"\r\n      />\r\n    </div>\r\n    <h2 className=\"bot-title\">Revolt AI Voice Bot</h2>\r\n    <div className=\"bot-intro\">\r\n      This bot provides helpful information about <b>Revolt Motors</b> in multiple languages.<br/>\r\n      Ask anything about Revolt models, electric bikes, dealerships, charging, and features!\r\n    </div>\r\n    <div className=\"button-group controls\">\r\n      <button\r\n        id=\"startButton\"\r\n        className=\"start-btn\"\r\n        onClick={startRecording}\r\n        disabled={isRecording}\r\n      >\r\n        <span role=\"img\" aria-label=\"start\">▶️</span> Start\r\n      </button>\r\n      <button\r\n        id=\"stopButton\"\r\n        className=\"stop-btn\"\r\n        onClick={stopRecording}\r\n        disabled={!isRecording}\r\n      >\r\n        <span role=\"img\" aria-label=\"stop\">⏹️</span> Stop\r\n      </button>\r\n      <button\r\n        id=\"resetButton\"\r\n        className=\"reset-btn\"\r\n        onClick={reset}\r\n        disabled={isRecording}\r\n      >\r\n        <span role=\"img\" aria-label=\"reset\">🔄</span> Reset\r\n      </button>\r\n    </div>\r\n\r\n    <div style={{ display: 'flex', justifyContent: 'center', margin: '12px 0 18px 0' }}>\r\n      <img \r\n        src={bikeImage} \r\n        alt=\"Revolt Bike\"\r\n        style={{\r\n          width: \"210px\",\r\n          height: \"auto\",\r\n          borderRadius: \"12px\",\r\n          boxShadow: \"0 2px 14px #0008\"\r\n        }}\r\n      />\r\n    </div>\r\n\r\n    <div\r\n      className={error ? \"status-text error\" : \"status-text\"}\r\n      style={{\r\n        position: 'absolute',\r\n        bottom: '5vh',\r\n        left: 0,\r\n        right: 0,\r\n        zIndex: 10,\r\n        textAlign: 'center',\r\n      }}\r\n    >\r\n      {error || status}\r\n    </div>\r\n  </div>\r\n);\r\n\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}